<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaluo-zz.github.io</id>
    <title>KALUO</title>
    <updated>2019-07-24T03:14:11.547Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaluo-zz.github.io"/>
    <link rel="self" href="https://kaluo-zz.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://kaluo-zz.github.io/images/avatar.png</logo>
    <icon>https://kaluo-zz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, KALUO</rights>
    <entry>
        <title type="html"><![CDATA[Pytorch之grid_sample函数]]></title>
        <id>https://kaluo-zz.github.io/post/pytorch-zhi-grid_sample-han-shu</id>
        <link href="https://kaluo-zz.github.io/post/pytorch-zhi-grid_sample-han-shu">
        </link>
        <updated>2019-07-24T02:48:26.000Z</updated>
        <content type="html"><![CDATA[<p><code>torch.nn.functional.grid_sample(input, grid, mode='bilinear', padding_mode='zeros')</code></p>
<p>给定<code>input</code>和流场<code>grid</code>，通过<code>grid</code>中像素坐标来从<code>input</code>中提取值，得到<code>output</code>。</p>
<p>在4-D情形下，如果<code>input</code>尺寸为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><msub><mi>H</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>W</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(N, C, H_{in}, W_{in})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，<code>grid</code>尺寸为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>N</mi><mo separator="true">,</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><mn>2</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(N, H_{out}, W_{out}, 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>，那么输出<code>output</code>尺寸为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>N</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><msub><mi>H</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><msub><mi>W</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(N, C, H_{out}, W_{out})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<blockquote>
<p>For each output location output[n, :, h, w], the size-2 vector grid[n, h, w] specifies input pixel locations x and y, which are used to interpolate the output value output[n, :, h, w].</p>
</blockquote>
<blockquote>
<p>grid specifies the sampling pixel locations normalized by the input spatial dimensions. Therefore, it should have most values in the range of [-1, 1]. For example, values x = -1, y = -1 is the left-top pixel of input, and values x = 1, y = 1 is the right-bottom pixel of input.</p>
</blockquote>
<p><code>grid</code>中的坐标已经被缩放到<code>[-1, 1]</code>，同时对于坐标还原后不是整数的点，<code>grid_sample</code>提供了插值方式来得到近似值。对于在<code>[-1, 1]</code>之外的点，其值由<code>padding_mode</code>指定。</p>
<p><code>padding_mode</code>可选选项如下：<br>
padding_mode=&quot;zeros&quot;: use 0 for out-of-bound grid locations,</p>
<p>padding_mode=&quot;border&quot;: use border values for out-of-bound grid locations,</p>
<p>padding_mode=&quot;reflection&quot;: use values at locations reflected by the border for out-of-bound grid locations. For location far away from the border, it will keep being reflected until becoming in bound, e.g., (normalized) pixel location x = -3.5 reflects by border -1 and becomes x' = 1.5, then reflects by border 1 and becomes x'' = -0.5.</p>
<p><code>mode</code>插值方式有两种：'bilinear' | 'nearest'. Default: 'bilinear'。</p>
<p>参考：https://pytorch.org/docs/stable/nn.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch图像基本操作]]></title>
        <id>https://kaluo-zz.github.io/post/pytorch-tu-xiang-ji-ben-cao-zuo</id>
        <link href="https://kaluo-zz.github.io/post/pytorch-tu-xiang-ji-ben-cao-zuo">
        </link>
        <updated>2019-07-22T06:14:19.000Z</updated>
        <content type="html"><![CDATA[<p>Pytorch提供了一个用于数据预处理的图像处理包<code>torchvision.transforms</code>，常见用法如下：</p>
<pre><code>train_loader = torch.utils.data.DataLoader(
        dataset.listDataset(train_list,
                       shuffle=True,
                       transform=transforms.Compose([
                       transforms.ToTensor(),transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                     std=[0.229, 0.224, 0.225]),
                   ]), 
                       train=True, 
                       seen=model.seen,
                       batch_size=args.batch_size,
                       num_workers=args.workers),
        batch_size=args.batch_size)
</code></pre>
<p>其中，<code>dataset.listDataset</code>是自己实现的读取数据、解析数据和转换数据格式的类。</p>
<p><code>transforms.Compose()</code>用于将各种transforms组合在一起。</p>
<p><code>transforms.ToTensor()</code>用于将 PIL.Image/numpy.ndarray 数据进转化为<code>torch.FloadTensor</code>，并归一化到<code>[0, 1.0]</code>：</p>
<ul>
<li>取值范围为<code>[0, 255]</code>的<code>PIL.Image</code>，转换成形状为<code>[C, H, W]</code>，取值范围是<code>[0, 1.0]</code>的<code>torch.FloadTensor</code>；</li>
<li>形状为<code>[H, W, C]</code>的<code>numpy.ndarray</code>，转换成形状为<code>[C, H, W]</code>，取值范围是<code>[0, 1.0]</code>的<code>torch.FloadTensor</code>。</li>
</ul>
<p>而transforms.ToPILImage则是将Tensor转化为PIL.Image。如果，我们要将Tensor转化为numpy，只需要使用 .numpy() 即可。</p>
<p><code>transforms.Normalize()</code>用于数据的归一化，输入每个通道的均值和标准差。</p>
<p>参考：https://zhuanlan.zhihu.com/p/27382990</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux将某个文件夹读写权限授予某个用户]]></title>
        <id>https://kaluo-zz.github.io/post/linux-jiang-mou-ge-wen-jian-jia-du-xie-quan-xian-shou-yu-mou-ge-yong-hu</id>
        <link href="https://kaluo-zz.github.io/post/linux-jiang-mou-ge-wen-jian-jia-du-xie-quan-xian-shou-yu-mou-ge-yong-hu">
        </link>
        <updated>2019-07-21T12:26:47.000Z</updated>
        <content type="html"><![CDATA[<p>chown -R username:password directory<code></code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用torch.matmul实现batch multiplication]]></title>
        <id>https://kaluo-zz.github.io/post/li-yong-torchmatmul-shi-xian-batch-multiplication</id>
        <link href="https://kaluo-zz.github.io/post/li-yong-torchmatmul-shi-xian-batch-multiplication">
        </link>
        <updated>2019-07-19T07:33:00.000Z</updated>
        <content type="html"><![CDATA[<p>【<code>torch.matmul</code>】</p>
<p><code>torch.matmul(tensor1, tensor2, out=None) → Tensor</code></p>
<pre><code>&gt;&gt;&gt; # vector x vector
&gt;&gt;&gt; tensor1 = torch.randn(3)
&gt;&gt;&gt; tensor2 = torch.randn(3)
&gt;&gt;&gt; torch.matmul(tensor1, tensor2).size()
torch.Size([])
&gt;&gt;&gt; # matrix x vector
&gt;&gt;&gt; tensor1 = torch.randn(3, 4)
&gt;&gt;&gt; tensor2 = torch.randn(4)
&gt;&gt;&gt; torch.matmul(tensor1, tensor2).size()
torch.Size([3])
&gt;&gt;&gt; # batched matrix x broadcasted vector
&gt;&gt;&gt; tensor1 = torch.randn(10, 3, 4)
&gt;&gt;&gt; tensor2 = torch.randn(4)
&gt;&gt;&gt; torch.matmul(tensor1, tensor2).size()
torch.Size([10, 3])
&gt;&gt;&gt; # batched matrix x batched matrix
&gt;&gt;&gt; tensor1 = torch.randn(10, 3, 4)
&gt;&gt;&gt; tensor2 = torch.randn(10, 4, 5)
&gt;&gt;&gt; torch.matmul(tensor1, tensor2).size()
torch.Size([10, 3, 5])
&gt;&gt;&gt; # batched matrix x broadcasted matrix
&gt;&gt;&gt; tensor1 = torch.randn(10, 3, 4)
&gt;&gt;&gt; tensor2 = torch.randn(4, 5)
&gt;&gt;&gt; torch.matmul(tensor1, tensor2).size()
torch.Size([10, 3, 5])
</code></pre>
<p><code>torch.mm</code>实现两个矩阵的相乘，不具有broadcasting功能。</p>
<p>参考：https://pytorch.org/docs/stable/torch.html#torch.matmul</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux静默安装matlab2019a]]></title>
        <id>https://kaluo-zz.github.io/post/linux-jing-mo-an-zhuang-matlab2019a</id>
        <link href="https://kaluo-zz.github.io/post/linux-jing-mo-an-zhuang-matlab2019a">
        </link>
        <updated>2019-07-18T02:47:20.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>下载<a href="http://zbh.ustc.edu.cn/zbh.php">matlab2019a</a>及其安装密钥；</p>
</li>
<li>
<p>安装</p>
</li>
</ol>
<pre><code>sudo mkdir /media/matlab
sudo /media/matlab/install -mode silent -fileInstallationKey key -agreeToLicense yes -licensePath /home/lab/network.lic -destinationFolder /usr/local/matlab2019a
sudo umount -l /media/matlab
</code></pre>
<ol start="3">
<li><code>sudo vi ~/.bashrc</code></li>
</ol>
<pre><code>alias matlab='/usr/local/matlab2019a/bin/matlab'
</code></pre>
<ol start="4">
<li><code>sudo vi /etc/bash.bashrc</code></li>
</ol>
<pre><code>export PATH=/usr/local/matlab2019a/bin${PATH:+:${PATH}}
</code></pre>
<ol start="5">
<li>
<p><code>source ~/.bashrc</code></p>
</li>
<li>
<p><code>matlab</code></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch可视化之Visdom]]></title>
        <id>https://kaluo-zz.github.io/post/pytorch-ke-shi-hua-zhi-visdom</id>
        <link href="https://kaluo-zz.github.io/post/pytorch-ke-shi-hua-zhi-visdom">
        </link>
        <updated>2019-07-11T11:29:57.000Z</updated>
        <content type="html"><![CDATA[<p>Visdom <a href="https://github.com/facebookresearch/visdom">github主页</a></p>
<p>Visdom旨在(远程)数据的可视化，并强调支持科学实验。</p>
<p>安装：<code>pip install visdom</code></p>
<p>启动：<code>python -m visdom.server</code></p>
<p>使用：</p>
<p>文件：visdom_plotter.py</p>
<pre><code>from visdom import Visdom
import numpy as np

class VisdomPlotter(object):
    def __init__(self, env_name = 'main'):
        self.viz = Visdom()
        self.env = env_name
        self.plots = {}
    
    def plot(self, var_name, split_name, title_name, x, y):
        if var_name not in self.plots:
            self.plots[var_name] = self.viz.line(X=np.array([x,x]), Y=np.array([y,y]), env=self.env, opts=dict(
                legend=[split_name],
                title=title_name,
                xlabel='Epochs',
                ylabel=var_name
            ))
        else:
            self.viz.line(X=np.array([x]), Y=np.array([y]), env=self.env, 
                            win=self.plots[var_name], name=split_name, update = 'append')
    
    def draw_image(self, title_name, img):
        self.viz.image(img, env=self.env, opts=dict(
                title = title_name
            ))
</code></pre>
<p>文件main.py</p>
<pre><code>import numpy as np
import torch
from utils.visdom_plotter import VisdomPlotter

visdom_plotter = VisdomPlotter()
...
visdom_plotter.draw_image('img_name',  img) # img : C x H x W
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用ffmpeg将一组图像转换为视频]]></title>
        <id>https://kaluo-zz.github.io/post/shi-yong-ffmpeg-jiang-yi-zu-tu-xiang-zhuan-huan-wei-shi-pin</id>
        <link href="https://kaluo-zz.github.io/post/shi-yong-ffmpeg-jiang-yi-zu-tu-xiang-zhuan-huan-wei-shi-pin">
        </link>
        <updated>2019-07-10T02:01:19.000Z</updated>
        <content type="html"><![CDATA[<p>当使用<code>ffmpeg</code>压缩视频时，建议使用<code>libx264</code>编解码器。在将图片转换为视频前，建议将图片名称更改为(<code>pic0001.png</code>, <code>pic0002.png</code>)之类的有序形式。相关命令：</p>
<pre><code>ffmpeg -r 60 image2 -s 1920x1080 -i pic%04d.png -vcodec libx264 -crf 25 -pix_fmt yuv420p test.mp4
</code></pre>
<ul>
<li><code>-r</code> 帧率(fps)</li>
<li><code>-crf</code> 质量，更低意味着更好的质量（一般15-25）</li>
<li><code>-pix_fmt yuv420p</code> 指定像素格式</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Distance Transform]]></title>
        <id>https://kaluo-zz.github.io/post/distance-transform</id>
        <link href="https://kaluo-zz.github.io/post/distance-transform">
        </link>
        <updated>2019-07-08T12:58:51.000Z</updated>
        <content type="html"><![CDATA[<p>Distance Transform</p>
<p>现在有这样一种需求，产生由点构成的曲线段的热图。如何产生呢？</p>
<p>首先介绍一下Distance transform。距离变换提供了图像中点的分离的度量，它处理的对象是二值图像。其基本思想是每个像素值赋值为其与最近的背景像素点之间的距离（常用的距离度量是欧式距离和曼哈顿距离）。</p>
<p>下面以一张图像为例。从上到下分别是原图、原图+轮廓点、轮廓点、经过距离变换后的图和经过标准化和阈值化后图。这样就得到了由轮廓点产生的边界线热图。</p>
<p><img src="https://kaluo-zz.github.io/post-images/1562725172655.png" alt=""><br>
<img src="https://kaluo-zz.github.io/post-images/1562725181225.png" alt=""><br>
<img src="https://kaluo-zz.github.io/post-images/1562725185714.png" alt=""><br>
<img src="https://kaluo-zz.github.io/post-images/1562725226765.png" alt=""><br>
<img src="https://kaluo-zz.github.io/post-images/1562725230518.png" alt=""></p>
<p>步骤如下：</p>
<ol>
<li>
<p>获取图像轮廓点；</p>
</li>
<li>
<p>得到与原图大小一样的二值图像B，轮廓点对应位置为0，其余位置为1；</p>
</li>
<li>
<p>使用<code>scipy.ndimage.distance_transform</code>函数来转换二值图像B，得到结果D；</p>
</li>
<li>
<p>将D中的最大值减去D中的每一个元素；</p>
</li>
<li>
<p>对D进行标准化；</p>
</li>
<li>
<p>利用对D中的每个像素进行处理。</p>
</li>
</ol>
<p class='katex-block katex-error' title='Error: Expected node of type ordgroup, but got node of type text'>   M(x, y) = \left\{
   \begin{array}
   	\text{exp}(-\frac{D(x, y)^2}{2\sigma^2}), &amp;\text{if}\; D(x, y) &lt; 3\sigma \\
   	0, &amp;\text{otherwise}
   \end{array}
   \right.
</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python属性访问]]></title>
        <id>https://kaluo-zz.github.io/post/python-shu-xing-fang-wen</id>
        <link href="https://kaluo-zz.github.io/post/python-shu-xing-fang-wen">
        </link>
        <updated>2019-07-03T13:21:28.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li><code>__getattr__(self, name)</code>：访问不存在的属性时自动调用</li>
<li><code>__getattribute__(self, name)</code>：访问存在的属性时自动调用（先调用该方法，查看是否存在该属性，若不存在，调用<code>__getattr__</code>。若重载了<code>__getattribute__</code>方法，则不会自动调用<code>__getattr__</code>方法，需在最后手动添加一行<code>object.__getattribute__(self, name)</code>。）。</li>
<li><code>__setattr__(self, name)</code>：设置实例对象的一个新的属性时自动调用</li>
<li><code>__delattr__(self, name)</code>：删除一个实例对象的属性时自动调用</li>
</ol>
<p>（python中无论实例还是类，都是用<code>__dict__</code>来存储属性和方法）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows创建软链接]]></title>
        <id>https://kaluo-zz.github.io/post/windows-chuang-jian-ruan-lian-jie</id>
        <link href="https://kaluo-zz.github.io/post/windows-chuang-jian-ruan-lian-jie">
        </link>
        <updated>2019-07-03T11:11:49.000Z</updated>
        <content type="html"><![CDATA[<p>打开cmd，在当前目录下创建链接到<code>D:\Files\COCO\images</code>的软链接：<br>
<code>mklink /J images D:\Files\COCO\images</code></p>
]]></content>
    </entry>
</feed>