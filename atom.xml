<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaluo-zz.github.io</id>
    <title>KALUO</title>
    <updated>2019-11-05T14:26:01.725Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaluo-zz.github.io"/>
    <link rel="self" href="https://kaluo-zz.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://kaluo-zz.github.io/images/avatar.png</logo>
    <icon>https://kaluo-zz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, KALUO</rights>
    <entry>
        <title type="html"><![CDATA[重要性采样（Importance Sampling）]]></title>
        <id>https://kaluo-zz.github.io/post/chong-yao-xing-cai-yang-importance-sampling</id>
        <link href="https://kaluo-zz.github.io/post/chong-yao-xing-cai-yang-importance-sampling">
        </link>
        <updated>2019-11-05T12:51:44.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://kaluo-zz.github.io/post-images/1572963944456.jpg" alt=""><br>
基础概念：</p>
<ol>
<li>累积分布函数(Cumulative Distribution Function, CDF)</li>
<li>概率密度函数(Probability Distribution Function, PDF)</li>
<li>采样(Sampling)</li>
<li>重要性采样(Importance Sampling)</li>
</ol>
<p>在计算机中，如何生成符合某种概率密度函数p(x)的样本？<br>
采样可分为均匀分布采样、离散分布采样、连续分布采样，这里关注连续分布采样。</p>
<p>如果一个分布的概率密度函数为p(x)，其累积分布函数cdf(x)为连续的严格增函数，且存在逆函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mtext>cdf</mtext><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>(</mo><mi>y</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\text{cdf}^{-1}(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">cdf</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.14734em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，那么我们可以利用累积分布函数的逆函数来生成服从该分布的样本。</p>
<p>假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ξ</mi></mrow><annotation encoding="application/x-tex">\xi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span></span></span></span>是[0, 1]区间上均与分布的随机变量，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mtext>cdf</mtext><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>(</mo><mi>ξ</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\text{cdf}^{-1}(\xi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">cdf</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-3.14734em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span><span class="mclose">)</span></span></span></span>服从概率密度函数为p(x)的分布。</p>
<p>但当p(x)非常复杂(比如由神经网络构成)，其累积分布函数的逆函数难以计算，那么就难以直接对p(x)进行采样。这时往往需要使用一些间接的采样策略，这就引入了我们将要介绍的重要性采样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Matlab删除结构体中的字段]]></title>
        <id>https://kaluo-zz.github.io/post/matlab-shan-chu-jie-gou-ti-zhong-de-zi-duan</id>
        <link href="https://kaluo-zz.github.io/post/matlab-shan-chu-jie-gou-ti-zhong-de-zi-duan">
        </link>
        <updated>2019-10-30T02:51:58.000Z</updated>
        <content type="html"><![CDATA[<p>s = rmfield(s, field)<br>
删除单个字段</p>
<pre><code class="language-matlab">s.a = 1;
s.b = 2;
s.c = 3;

field = 'b';
s = rmfield(s, field)
</code></pre>
<p>删除多个字段</p>
<pre><code class="language-matlab">S.first = 1;
S.second = 2;
S.third = 3;
S.fourth = 4;

fields = {'first', 'fourth'};
S = rmfield(S, fields)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用coco api 获取mask并绘制]]></title>
        <id>https://kaluo-zz.github.io/post/li-yong-coco-api-huo-qu-mask-bing-hui-zhi</id>
        <link href="https://kaluo-zz.github.io/post/li-yong-coco-api-huo-qu-mask-bing-hui-zhi">
        </link>
        <updated>2019-10-30T00:29:17.000Z</updated>
        <content type="html"><![CDATA[<p>根据网络预测结果，构造coco格式的标注anns：</p>
<pre><code>{
    &quot;image_id&quot;: int,
    &quot;category_id&quot;: int,
    &quot;bbox&quot;: [x, y, w, h],
    &quot;score&quot;: float,
    &quot;segmentation&quot;: [[], [], ...]
}
</code></pre>
<p>举个例子，假如网络输出的格式为 pred = [xmin, ymin, xmax, ymax, scores, kps, clses]，则</p>
<pre><code class="language-python">color = [128, 0, 128]
if pred[4] &gt; thresh:
    image_id = batch['meta']['img_id'].cpu().numpy()[0]
    bbox = pred[:4].copy()
    bbox[2] -= bbox[0]
    bbox[3] -= bbox[1]
    bbox_out = list(map(lambda x: float(&quot;{:.2f}&quot;.format(x)), bbox))
    score = pred[4].copy()
    kps = pred[5:(5+2*num)].copy()
    kps = list(map(lambda x: float(&quot;{:.2f}&quot;.format(x)), kps)) # [x, y, x, y, ...]
    anns_pred = {
        &quot;image_id&quot;: int(image_id),
        &quot;category_id&quot;: 1, # 只是单个类别，person
        &quot;bbox&quot;: bbox_out,
        &quot;score&quot;: float(&quot;{:.2f}&quot;.format(score)),
        &quot;segmentation&quot;: [kps]
    }

    mask = coco.annToMask(anns)
    mask3 = np.ones((mask.shape[0], mask.shape[1], 3), dtype=np.float32)
    for j in range(3):
        mask3[:, :, j] = color[j]
        mask3[:, :, j] *= mask
    mask3 = mask3.astype(img.type)
    combined_img = cv2.addWeighted(mask3, 0.8, img, 1, 0)
</code></pre>
<p>上面示例只是显示了一个anns的img+mask结果。一张图像中的多个anns可以通过循环遍历来得到最终的mask:</p>
<pre><code>mask = np.zeros((h, w), dtype=np.float32)
for i in range(len(preds)):
    mask = cv2.bitwise_or(mask, coco.annToMask(preds[i]))
</code></pre>
<p>cv2.addWeighted()代码实例：<br>
https://www.programcreek.com/python/example/89436/cv2.addWeighted</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPU状态监测]]></title>
        <id>https://kaluo-zz.github.io/post/gpu-zhuang-tai-jian-ce</id>
        <link href="https://kaluo-zz.github.io/post/gpu-zhuang-tai-jian-ce">
        </link>
        <updated>2019-10-27T12:18:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gpustat">gpustat</h2>
<p>项目地址：https://github.com/wookayin/gpustat</p>
<ol>
<li>安装：pip install gpustat</li>
<li>查看：gpustat</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python之上三角矩阵]]></title>
        <id>https://kaluo-zz.github.io/post/python-zhi-shang-san-jiao-ju-zhen</id>
        <link href="https://kaluo-zz.github.io/post/python-zhi-shang-san-jiao-ju-zhen">
        </link>
        <updated>2019-09-15T06:38:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="numpytrium-k0">numpy.triu(m, k=0)</h1>
<blockquote>
<p>Upper triangle of an array.</p>
<p>Return a copy of a matrix with the elements below the k-th diagonal zeroed.</p>
</blockquote>
<p>例子:</p>
<pre><code>np.triu(np.ones(5), 0)
array([[1., 1., 1., 1., 1.],
       [0., 1., 1., 1., 1.],
       [0., 0., 1., 1., 1.],
       [0., 0., 0., 1., 1.],
       [0., 0., 0., 0., 1.]])
&gt;&gt;&gt; np.triu(np.ones(5), 1)
array([[0., 1., 1., 1., 1.],
       [0., 0., 1., 1., 1.],
       [0., 0., 0., 1., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0.]])
&gt;&gt;&gt; np.triu(np.ones(5), 2)
array([[0., 0., 1., 1., 1.],
       [0., 0., 0., 1., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
&gt;&gt;&gt; np.triu(np.ones(5), 3)
array([[0., 0., 0., 1., 1.],
       [0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
&gt;&gt;&gt; np.triu(np.ones(5)) - np.triu(np.ones(5), 3)
array([[1., 1., 1., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 1., 1., 1.],
       [0., 0., 0., 1., 1.],
       [0., 0., 0., 0., 1.]])
&gt;&gt;&gt; mask = np.triu(np.ones(5)) - np.triu(np.ones(5), 3)
&gt;&gt;&gt; mask
array([[1., 1., 1., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 1., 1., 1.],
       [0., 0., 0., 1., 1.],
       [0., 0., 0., 0., 1.]])
&gt;&gt;&gt; mask[3, 0:1] = 1
&gt;&gt;&gt; mask[4, 0:2] = 1
&gt;&gt;&gt; mask
array([[1., 1., 1., 0., 0.],
       [0., 1., 1., 1., 0.],
       [0., 0., 1., 1., 1.],
       [1., 0., 0., 1., 1.],
       [1., 1., 0., 0., 1.]])
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch之gather理解]]></title>
        <id>https://kaluo-zz.github.io/post/pytorch-zhi-gather-li-jie</id>
        <link href="https://kaluo-zz.github.io/post/pytorch-zhi-gather-li-jie">
        </link>
        <updated>2019-08-19T12:22:27.000Z</updated>
        <content type="html"><![CDATA[<pre><code>torch.gather(input, dim, index, out=None, sparse_grad=False) → Tensor
</code></pre>
<p>首先，我们要知道index的各个维度（除dim指定的维度外）的大小必须和input相同。比如，input维度是[3, 4, 3, 3]，若指定dim=1，则index的维度为[3, n, 3, 3]（n为指定的正整数）。index的维度就是gather函数输出数据的维度。</p>
<p>index[0, 0, 0, 0]表示在位置(0, 0, 0, 0)处的值（假如为3），将此值用以替换index[0, 0, 0, 0]的dim=1处，得[0, 3, 0, 0]，则表示提取input[0, 3, 0, 0]处的值放在out[0, 0, 0, 0]处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux之shell命令]]></title>
        <id>https://kaluo-zz.github.io/post/linux-zhi-shell-ming-ling</id>
        <link href="https://kaluo-zz.github.io/post/linux-zhi-shell-ming-ling">
        </link>
        <updated>2019-08-16T11:56:13.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>去除文本中的空行</li>
</ol>
<pre><code>sed -i '/^$/d' loss.txt
</code></pre>
<ol start="2">
<li>提取文本中的第几列数据</li>
</ol>
<pre><code>cat segnet_0.log | awk '{print $22}' &gt; loss.txt
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tikz绘图]]></title>
        <id>https://kaluo-zz.github.io/post/tikz-hui-tu</id>
        <link href="https://kaluo-zz.github.io/post/tikz-hui-tu">
        </link>
        <updated>2019-08-14T08:51:55.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>Tikz文档结构</li>
</ol>
<pre><code>\documentclass{article}
\usepackage{tikz}
\begin{document}
    \begin{tikzpicture}
     TikZ 命令
    \end{tikzpicture}
\end{document}
</code></pre>
<ol start="2">
<li>Tikz语法形式</li>
</ol>
<blockquote>
<p>\起始动作 (变量) [参数列表] 下一动作 (变量) [参数列表] 下一动作 (变量) [参数列表] ...</p>
</blockquote>
<ol start="3">
<li>直线<br>
画直线分为两步：给出起始点，给出到下一个点的路径。例如：</li>
</ol>
<pre><code>\draw (-1, 0) -- (1, 0);
</code></pre>
<p>上面第一个坐标 (-1, 0) 是 \draw 命令的参数（可以理解为“落笔点”），而第二个坐标 (1, 0) 是 &quot;--&quot; 命令的参数。不要把( -1, 0) -- (1, 0) 统一看做 \draw 命令的参数。上面这个命令可以理解为：<br>
（落笔到）(-1, 0) ，（画直线到） (1, 0)<br>
路径可以继续延伸下去，直到分号为止。例如</p>
<pre><code>\draw (-1, 0) -- (1, 0) -- (0, -1) -- (0, 1);
</code></pre>
<p>上面这个语句可以理解为：<br>
（落笔到）(-1, 0) ，（画直线到） (1, 0)，（画直线到）(0, -1)，（画直线到） (0, 1)<br>
“落笔”后仍然可以“抬笔”，只要中断画线的动作即可，比如:</p>
<pre><code>\draw (-1, 0) -- (1, 0)   (0, -1) -- (0, 1);
</code></pre>
<p>上面这个语句可以理解为：<br>
（落笔到）(-1, 0) ，（画直线到） (1, 0)，（落笔到）(0, -1) ，（画直线到） (0, 1)<br>
3. 椭圆和圆<br>
从 圆锥曲线的定义 可以知道：圆是椭圆的特殊情况，所以先研究 椭圆 怎么画。<br>
绘制椭圆，需要给出中心位置，作为 \draw 的参数，然后给出半轴长，放置于参数列表中，以方括号括起来：</p>
<pre><code>\draw (0, 0) ellipse [x radius=2cm, y radius=1cm];
</code></pre>
<p>画圆时的 radius 参数同时设定 x radius 和 y radius：</p>
<pre><code>\draw (0, 0) circle [radius=1cm];
</code></pre>
<ol start="4">
<li>矩形<br>
矩形的画法是，由落笔点和对角点确定一个矩形：</li>
</ol>
<pre><code>\draw (0, 0) rectangle (1, 1);
</code></pre>
<ol start="5">
<li>网格线<br>
网格线和矩形类似，也是确定落笔点和对角点，区别是一个画出外围的轮廓线，一个是画出矩形范围内的网格，默认的间隔宽度为1单位。</li>
</ol>
<pre><code>\draw (0, 0) grid (3, 3);
</code></pre>
<p>网格有一个重要的特性：</p>
<blockquote>
<p>无论起点和终点的位置在哪里，网格线总是通过原点 (0, 0)。</p>
</blockquote>
<ol start="6">
<li>画图样式<br>
从 网格线 一节就能看出， \draw 命令的样式参数可以简写，比如</li>
</ol>
<pre><code>\draw [color = red] (0,0) [radius=1cm] circle;
</code></pre>
<p>可以简写为</p>
<pre><code>\draw [red] (0,0) circle (1cm);
</code></pre>
<p>线宽的选项有以下几种：</p>
<ul>
<li>very thin</li>
<li>thin</li>
<li>thick</li>
<li>very thick</li>
<li>ultra thick<br>
ultra thin 的选项，对于分辨率不高的普通显示器，可能不能正常显示。而且没有 normal 这一选择，如果想表达 thin 和 thick 之间的中间值，要用 semithick.</li>
</ul>
<ol start="7">
<li>圆弧<br>
圆弧的命令是 arc，属性全部在方括号内，作用是从 \draw 的落笔点开始，画出一段椭圆弧，或者圆弧。比如</li>
</ol>
<pre><code>\draw (0,0) arc [start angle=-30, end angle=30, x radius=1cm, y radius=3cm];
\draw (0,0) arc [start angle=-30, end angle=30, x radius=3cm, y radius=1cm];
\draw (0,0) arc [start angle=-30, end angle=30, x radius=2cm, y radius=2cm];
</code></pre>
<p>和 圆 一样，可以用 radius 同时指定 x radius 和 y radius ：</p>
<pre><code>\draw (0,0) arc [start angle=-30, end angle=30, radius=2cm];
\draw (0,0) arc [start angle=-40, end angle=40, radius=3cm];
\draw (0,0) arc [start angle=-50, end angle=50, radius=4cm];
</code></pre>
<ol start="8">
<li>裁剪<br>
如果只想突出显示图形的局部，可以用某种路径（比如圆、矩形）作为剪切工具，命令是 \clip , 和 \draw 类似，唯一不同的是画完曲线后，将曲线外的部分裁掉。比如下面的语句：</li>
</ol>
<pre><code>\clip (0, 0) circle (1.9);
\draw (-1.5, -1.5) rectangle (1.5, 1.5);
</code></pre>
<p>\clip 命令还有一个可选参数 [draw] ， 启用后，将同时画出裁剪的边界，比如</p>
<pre><code>\clip[draw] (0, 0) circle (1.9);
\draw (-1.5, -1.5) rectangle (1.5, 1.5);
</code></pre>
<ol start="10">
<li>\插入外部图像</li>
</ol>
<pre><code>\node[inner sep=0pt] (russell) at (0,0)
    {\includegraphics[width=.25\textwidth]{bertrand_russell.jpg}};
</code></pre>
<p>参考：<br>
https://www.lfhacks.com/tech/tikz-1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu之查看CPU使用情况]]></title>
        <id>https://kaluo-zz.github.io/post/ubuntu-zhi-cha-kan-cpu-shi-yong-qing-kuang</id>
        <link href="https://kaluo-zz.github.io/post/ubuntu-zhi-cha-kan-cpu-shi-yong-qing-kuang">
        </link>
        <updated>2019-08-14T01:34:03.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>系统自带：top</li>
<li>安装htop，<code>apt-get install htop</code></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch之weight.data]]></title>
        <id>https://kaluo-zz.github.io/post/pytorch-zhi-weightdata</id>
        <link href="https://kaluo-zz.github.io/post/pytorch-zhi-weightdata">
        </link>
        <updated>2019-08-09T07:39:53.000Z</updated>
        <content type="html"><![CDATA[<p><code>conv = torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias)</code></p>
<p>pytorch中的卷积核权重保存在conv.weight.data中，可以通过<code>.cpu().numpy()</code>将其转换为numpy形式，尺寸为<code>[out_channels, in_channels, kernel_h, kernel_w]</code>。</p>
<p>也可以将numpy形式的权重赋给卷积核，只要尺寸保持一致：</p>
<p><code>conv.weight.data = torch.from_numpy(new_weights).cuda()</code></p>
<p>对于<code>torch.nn.Linear</code>也是类似的。</p>
<p>给定一个模型<code>net</code>，如何获取它的权重呢？</p>
<pre><code>net = Net()

# 第一个卷积核的weight和bias权重信息
print(list(net.state_dict().items())[0][0]) # weight的名称
print(list(net.state_dict().items())[0][1]) # weight的值
# 或
# print(list(net.state_dict().items())[0][1].data)
print(list(net.state_dict().items())[0][1].shape) # weight的尺寸
# 或
# print(list(net.state_dict().items())[0][1].data.shape)

print(list(net.state_dict().items())[1][0]) # bias的名称
print(list(net.state_dict().items())[1][1]) # bias的值
print(list(net.state_dict().items())[1][1].shape) # bias的尺寸

</code></pre>
<p>输出：</p>
<pre><code>frontend.0.weight
tensor([[[[-5.5373e-01,  1.4270e-01,  5.2896e-01],
          [-5.8312e-01,  3.5655e-01,  7.6566e-01],
          [-6.9022e-01, -4.8019e-02,  4.8409e-01]],

         [[ 1.7548e-01,  9.8630e-03, -8.1413e-02],
          [ 4.4089e-02, -7.0323e-02, -2.6035e-01],
          [ 1.3239e-01, -1.7279e-01, -1.3226e-01]],

         [[ 3.1303e-01, -1.6591e-01, -4.2752e-01],
          [ 4.7519e-01, -8.2677e-02, -4.8700e-01],
          [ 6.3203e-01,  1.9308e-02, -2.7753e-01]]],


        [[[ 2.3254e-01,  1.2666e-01,  1.8605e-01],
          [-4.2805e-01, -2.4349e-01,  2.4628e-01],
          [-2.5066e-01,  1.4177e-01, -5.4864e-03]],

         [[-1.4076e-01, -2.1903e-01,  1.5041e-01],
          [-8.4127e-01, -3.5176e-01,  5.6398e-01],
          [-2.4194e-01,  5.1928e-01,  5.3915e-01]],

         [[-3.1432e-01, -3.7048e-01, -1.3094e-01],
          [-4.7144e-01, -1.5503e-01,  3.4589e-01],
          [ 5.4384e-02,  5.8683e-01,  4.9580e-01]]],


        [[[ 1.7715e-01,  5.2149e-01,  9.8740e-03],
          [-2.7185e-01, -7.1709e-01,  3.1292e-01],
          [-7.5753e-02, -2.2079e-01,  3.3455e-01]],

         [[ 3.0924e-01,  6.7071e-01,  2.0546e-02],
          [-4.6607e-01, -1.0697e+00,  3.3501e-01],
          [-8.0284e-02, -3.0522e-01,  5.4460e-01]],

         [[ 3.1572e-01,  4.2335e-01, -3.4976e-01],
          [ 8.6354e-02, -4.6457e-01,  1.1803e-02],
          [ 1.0483e-01, -1.4584e-01, -1.5765e-02]]],


        ...,


        [[[ 7.7599e-02,  1.2692e-01,  3.2305e-02],
          [ 2.2131e-01,  2.4681e-01, -4.6637e-02],
          [ 4.6407e-02,  2.8246e-02,  1.7528e-02]],

         [[-1.8327e-01, -6.7425e-02, -7.2120e-03],
          [-4.8855e-02,  7.0427e-03, -1.2883e-01],
          [-6.4601e-02, -6.4566e-02,  4.4235e-02]],

         [[-2.2547e-01, -1.1931e-01, -2.3425e-02],
          [-9.9171e-02, -1.5143e-02,  9.5385e-04],
          [-2.6137e-02,  1.3567e-03,  1.4282e-01]]],


        [[[ 1.6520e-02, -3.2225e-02, -3.8450e-03],
          [-6.8206e-02, -1.9445e-01, -1.4166e-01],
          [-6.9528e-02, -1.8340e-01, -1.7422e-01]],

         [[ 4.2781e-02, -6.7529e-02, -7.0309e-03],
          [ 1.1765e-02, -1.4958e-01, -1.2361e-01],
          [ 1.0205e-02, -1.0393e-01, -1.1742e-01]],

         [[ 1.2661e-01,  8.5046e-02,  1.3066e-01],
          [ 1.7585e-01,  1.1288e-01,  1.1937e-01],
          [ 1.4656e-01,  9.8892e-02,  1.0348e-01]]],


        [[[ 3.2176e-02, -1.0766e-01, -2.6388e-01],
          [ 2.7957e-01, -3.7416e-02, -2.5471e-01],
          [ 3.4872e-01,  3.0041e-02, -5.5898e-02]],

         [[ 2.5063e-01,  1.5543e-01, -1.7432e-01],
          [ 3.9255e-01,  3.2306e-02, -3.5191e-01],
          [ 1.9299e-01, -1.9898e-01, -2.9713e-01]],

         [[ 4.6032e-01,  4.3399e-01,  2.8352e-01],
          [ 1.6341e-01, -5.8165e-02, -1.9196e-01],
          [-1.9521e-01, -4.5630e-01, -4.2732e-01]]]])
torch.Size([64, 3, 3, 3])
frontend.0.bias
tensor([ 0.4034,  0.3778,  0.4644, -0.3228,  0.3940, -0.3953,  0.3951, -0.5496,
         0.2693, -0.7602, -0.3508,  0.2334, -1.3239, -0.1694,  0.3938, -0.1026,
         0.0460, -0.6995,  0.1549,  0.5628,  0.3011,  0.3425,  0.1073,  0.4651,
         0.1295,  0.0788, -0.0492, -0.5638,  0.1465, -0.3890, -0.0715,  0.0649,
         0.2768,  0.3279,  0.5682, -1.2640, -0.8368, -0.9485,  0.1358,  0.2727,
         0.1841, -0.5325,  0.3507, -0.0827, -1.0248, -0.6912, -0.7711,  0.2612,
         0.4033, -0.4802, -0.3066,  0.5807, -1.3325,  0.4844, -0.8160,  0.2386,
         0.2300,  0.4979,  0.5553,  0.5230, -0.2182,  0.0117, -0.5516,  0.2108])
torch.Size([64])
</code></pre>
<p><code>net.state_dict().items()</code>返回一个迭代器，可以用for循环遍历权重：<code>for k, v in net.state_dict().items()</code>。其中，<code>k</code>是权重名称，<code>v</code>是其值。</p>
<p>可以使用<code>list</code>将其转换为list：<code>list(net.state_dict().items())</code>。</p>
]]></content>
    </entry>
</feed>